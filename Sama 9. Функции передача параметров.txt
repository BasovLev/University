#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BASE 4
long int Sum (long int a, long int b, int k);
long int Raz (long int a, long int b, int k);
long int Pro (long int a, long int b, int k);
long int Pow (long int a, long int b, int k);
long int BASEtoten (long int a);
long int TtoBASE (long int *, long int);

int
main (void)
{
    long int a, b, c, d, k;
    k = 0;
    scanf ("%ld", &a);
    scanf ("%ld", &b);
    c = Sum (Raz (Pro (Pow (a, 2), b), Pro (Pow (Raz (b, a), 2)), b), b);
    if (k == 1)
    {
      printf ("1!");
    }
    else if (k == 2)
    {
        printf("2!");
    }
    else if (k == 3)
    {
        printf("3!");
    }
    printf ("%ld", c);
    return 0;
}

long int
Sum (long int a, long int b, int k)
{
  long int S = 0, sum = 0;
  long int n = 0, m = 0;
  n = BASEtoten (a);
  m = BASEtoten (b);
  S = n + m;
  sum = TtoBASE (&S, S);
  if ((sum == 1) && (k == 0))
    {
      k = 1;
    break}
  return S;
}


long int
Raz (long int a, long int b, int k)
{
  long int sum = 0;
  sum = TtoBASE (&S, S);
  if ((sum == 1) && (k == 0))
    {
      k = 2;
    break}
  return Sum (a, -b);
}

long int
Pro (long int a, long int b)
{
  long int pro = 0;
  if (b < 0)
    {
      b *= -1;
      a *= -1;
    }
  while (b)
    {
      pro = Sum (pro, a);
      b = Raz (b, 1);
    }
  return pro;
}

long int
Pow (long int a, long int b)
{
  long int Pow = 1;
  while (b)
    {
      Pow = Pro (a, Pow);
      b = Raz (b, 1);
    }
  return Pow;
}

long int
BASEtoten (long int a)
{
  int k = 1;
  long int a10 = 0;
  while (a)
    {
      a10 += k * (a % 10);
      k *= 4;
      a /= 10;
    }
  return a10;
}

long int
TtoBASE (long int *c, long int b)
{
  *c = 0;
  int k = 1, m = 0, i = 1;
  if (b < 0)
    {
      b *= (-1);
      i = -1;
    }
  while (b)
    {
      if (2122222222 - *c >= (k * (b % 4)))
	{
	  *c += k * (b % 4);
	  k *= 10;
	  b /= 4;
	}
      else
	{
	  m = 1;
	  break;
	}
    }
  *c *= i;
  return m;
}
